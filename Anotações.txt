Quando estamos trabalhando com React, muitas vezes precisamos acessar diretamente um elemento DOM ou um componente filho.

O forwardRef é uma ferramenta que o React nos oferece para facilitar essa tarefa. 
Ele nos permite passar referências (ou "refs") de um componente pai para um componente filho, de forma que possamos interagir diretamente com o DOM ou com o componente filho.

Por que precisamos do forwardRef?
Imagine que você tem um componente de entrada de texto (input) e deseja focar nele automaticamente quando a página carrega. 
Para fazer isso, você precisa de uma referência direta ao elemento DOM do input. 
O forwardRef nos ajuda a passar essa referência de um componente pai para o componente filho, permitindo que o pai controle o foco do input.

Exemplo:

        import React, { forwardRef, useRef } from 'react';
        
        interface MeuInputProps extends React.InputHTMLAttributes<HTMLInputElement> {}
        
        // Componente filho que usa forwardRef
        const MeuInput = forwardRef<HTMLInputElement, MeuInputProps>((props, ref) => {
        return <input ref={ref} {...props} />;
        });
        
        // Componente pai
        function App() {
        const inputRef = useRef<HTMLInputElement>(null);
        
        const focarNoInput = () => {
            // Usando a referência para focar no input
            if (inputRef.current) {
            inputRef.current.focus();
            }
        };
        
        return (
            <div>
                <MeuInput ref={inputRef} placeholder="Digite algo aqui..." />
                <button onClick={focarNoInput}>Focar no Input</button>
            </div>
        );
        }
        
        export default App;

Usamos o forwardRef para permitir que o componente pai passe uma referência para o input.

O forwardRef recebe uma função que tem props e ref como argumentos. O ref é então atribuído ao elemento DOM que queremos referenciar.

Componente pai (App): criamos uma referência usando useRef e a passamos para o componente filho MeuInput. 
Quando o botão é clicado, a função focarNoInput usa essa referência para focar no input;
Acesso ao DOM: como vimos no exemplo, forwardRef é útil para acessar diretamente elementos DOM em componentes filhos;
Integração com bibliotecas de terceiros: muitas vezes, bibliotecas de UI exigem referências diretas a elementos DOM para funcionar corretamente;
Componentes de ordem superior (HOCs): forwardRef pode ser usado em HOCs para passar referências através de componentes.

Futuras mudanças na versão 19 do React:
O React está sempre evoluindo, e a versão 19 promete trazer melhorias no uso de referências. 
A partir do React 19, você pode passar ref diretamente como uma prop para componentes funcionais, sem precisar usar forwardRef.

O ref já é aceito como uma prop normal, simplificando o código:

    function MeuInput({ placeholder, ref }) {
        return <input placeholder={placeholder} ref={ref} />;
    }

    // Uso do componente
    <MeuInput ref={minhaRef} />;

A documentação do React é um ótimo ponto de partida para entender como forwardRef funciona e como ele pode ser usado em diferentes cenários.

------------------------------------------

Explorando o Hook useRef

Um hook que permite que acessemos valores atuais da dom pela prop .current do objeto; Esse valor nao se altera entre re renderizações;

Instrui o React a "lembrar" de algo. A função dele é criar uma referência que mantém seu valor entre renderizações. 

Nesse projeto, criamos essa referência para nosso componente de modal, no caso, o dialog. 
Basicamente, o que ele faz é permitir que o React funcione como um virtual DOM em conjunto com o DOM real. 
O virtual DOM serve como uma cópia do DOM real, e o React o utiliza para comparar e fazer alterações de estado apenas onde é necessário, evitando recarregar a página inteira. 
Isso é um princípio das Single Page Applications (Aplicações de Página Única).

O useRef rompe essa barreira, pois não está olhando para o virtual DOM, mas sim acessando diretamente o DOM real. 
Por isso, a referência mantém seu valor entre renderizações.

Exemplo Prático de useRef
Temos um exemplo de inputRef e queremos explorar as possibilidades de utilizar um ref. 
Criamos uma referência para um componente de input e podemos, por exemplo, lançar o foco para esse componente quando clicamos em uma imagem ou botão. 
Podemos atrelar a própria label desse componente por questões de acessibilidade. 
Criamos uma função chamada focarInput, que envia o foco para o componente de input. 
Essa função pode ser chamada ao clicar ou selecionar uma imagem, texto ou algo do tipo.

        const inputRef = useRef<HTMLInputElement>(null);

        const focarInput = () => {
        inputRef.current?.focus();
        };

        return <input ref={inputRef} />;

Utilizando forwardRef para Referências Externas
Se temos um componente React e queremos que ele receba uma referência de um componente externo, ou seja, 
queremos passar uma referência para um elemento interno do nosso componente, precisamos utilizar o forwardRef. 
No entanto, só precisamos usar o forwardRef se estivermos trabalhando com uma versão do React a partir da 18 ou inferior. 
Na versão 19 do React, provavelmente o forwardRef não será mais necessário.

Ele basicamente permite que um componente filho receba uma referência de um componente pai e a passe para um elemento interno. 
No caso de uma modal, por exemplo, podemos ter um componente chamado dialog e queremos passar uma referência para ele, a fim de controlar métodos como abrir e fechar.

Exemplo de forwardRef com Componente MeuInput
Vamos considerar um exemplo com um input. 
Suponhamos que criamos um componente chamado MeuInput e queremos que ele receba uma referência externa, passando-a para a tag input. 
Utilizamos o forwardRef e, no TypeScript, precisamos definir corretamente seus tipos. Ao utilizar, temos um componente App, que é o componente pai, e usa o MeuInput. 
Criamos uma referência dentro do App e a passamos como referência para o MeuInput.

        const MeuInput = forwardRef<HTMLInputElement, {}>((props, ref) => (
        <input ref={ref} {...props} />
        ));

        const App = () => {
        const inputRef = useRef<HTMLInputElement>(null);

        return <MeuInput ref={inputRef} />;
        };

Hook useImperativeHandle
Muito eficaz quando trabalhamos com o useRef. 
Ele expõe métodos do componente filho para que possam ser utilizados no componente pai.
É como se dissesse ao React para mostrar apenas o que é necessário. Assim, o componente pai pode acessar métodos do componente filho.

Exemplo de useImperativeHandle com Componente Modal:
No exemplo da modal que construímos, dentro do componente de modal, temos dois métodos: abrir e fechar.
Utilizamos o useImperativeHandle para receber a referência externa e expor os métodos abrir e fechar, que são específicos da tag dialog. 
Isso nos permite controlar se a modal está aberta ou fechada.

Aqui está como implementamos isso:

        const Modal = forwardRef((_, ref) => {
        const dialogRef = useRef<HTMLDialogElement>(null);

        useImperativeHandle(ref, () => ({
            abrir: () => dialogRef.current?.showModal(),
            fechar: () => dialogRef.current?.close(),
        }));

        return <dialog ref={dialogRef}>Sou uma modal</dialog>;
        });

Implementação no Componente App
No componente App, criamos uma referência para a modal, modalRef, e a passamos para o componente de modal. 
Utilizamos um botão com onClick para acessar o método abrir, que abriria a modal.

Veja como isso é feito no componente App:

        const App = () => {
        const modalRef = useRef<{ abrir: () => void; fechar: () => void }>(null);

        return <button onClick={() => 
            modalRef.current?.abrir()
        }>Abrir Modal</button>;
        };


-----------------------


No TypeScriptpodemos definir interfaces para respostas HTTP e melhorar o tratamento de erros.

1. Tipando promises
O problema de não tipar promises é que você nunca tem certeza do que será retornado. 
Com TypeScript, você pode explicitar o tipo esperado e evitar checagens desnecessárias:

    const obterMensagem = (): Promise<string> => {
    return new Promise((resolve) => setTimeout(() => resolve("Sucesso!"), 1000));
    };

    obterMensagem().then((mensagem) => {
    console.log(mensagem.toUpperCase()); // TypeScript garante que mensagem é uma string
    });

Aqui, o TypeScript já avisa caso tentemos acessar propriedades inexistentes ou façamos operações inválidas.

Se o retorno da promisse não for uma string provavelmente um erro pipocará na sua IDE e de cara você saberá os problemas com a sua requisição.
Vale sempre lembrar que validar com um Zod da vida aumenta a segurança de dados.

2. Melhorando requisições com Axios

Com Axios e TypeScript, podemos definir a estrutura da resposta e garantir que os dados sempre sigam um formato esperado:

import axios from "axios";

    interface Usuario {
    id: number;
    nome: string;
    email: string;
    }

    const buscarUsuarios = async (): Promise<Usuario[]> => {
    const { data } = await axios.get<Usuario[]>("https://api.exemplo.com/usuarios");
    return data;
    };

    buscarUsuarios().then((usuarios) => {
    console.log(usuarios[0].nome); // Sem suposições sobre estrutura de dados
    });

No código acima, o axios.get<Usuario[]> já define o tipo esperado da resposta. 
O retorno da função buscarUsuarios está explícito (Promise<Usuario[]>), uma promessa de um array de usuários, evitando inferências erradas. 
Com a tipagem, evitamos checagens desnecessárias no .then() pois garantimos que os dados que estão chegando são do tipo esperado.

3. Tratamento de erros com TypeScript
Erros em operações assíncronas podem ser imprevisíveis. 
Tipar corretamente evita que você caia em armadilhas do catch, onde o erro pode ser um string, error ou qualquer outra coisa:

    async function buscarDados(): Promise<void> {
    try {
        const resposta = await fetch("https://api.exemplo.com/dados");

        if (!resposta.ok) {
        throw new Error(`Erro HTTP: ${resposta.status}`);
        }

        const dados: unknown = await resposta.json();
        console.log(dados);
    } catch (erro: unknown) {
        if (erro instanceof Error) {
        console.error("Erro ao buscar dados:", erro.message);
        } else {
        console.error("Erro desconhecido");
        }
    }
    }

O catch (erro: unknown) obriga a validação antes de acessar erro.message. 
O throw new Error(...) mantém um padrão claro para mensagens de erro e o uso do tipo unknown força a validação explícita, evitando suposições erradas.

Artigo sobre promises: https://dev.to/bcostaaa01/promises-in-javascript-and-typescript-5eh9

=============================================

Operadores JavaScript/TypeScript

1. Operador de coalescência nula (??)
O operador de coalescência nula (??) é usado para fornecer um valor padrão quando uma variável é null ou undefined. 
Isso é útil quando você quer garantir que uma variável sempre tenha um valor, mesmo que não tenha sido definida.

Imagine que você tem uma variável que pode não ter sido inicializada:

let nome;

Se você quiser garantir que nome tenha um valor, você pode usar o operador de coalescência nula:

let nomeCompleto = nome ?? "Nome não fornecido";
console.log(nomeCompleto); // Saída: "Nome não fornecido"

Neste exemplo, como nome é undefined, o valor "Nome não fornecido" é atribuído a nomeCompleto.

Antes do operador de coalescência nula, os programadores usavam o operador || (ou lógico) para fornecer valores padrão. 
No entanto, isso poderia levar a resultados inesperados se o valor fosse 0, “'' (string vazia) ou false, pois todos são considerados "falsy" em JavaScript.

O operador (??) resolve esse problema, pois só considera null e undefined como valores que precisam de um padrão.

2. Operador de encadeamento opcional (?.)
O operador de encadeamento opcional (?.) acessa propriedades de objetos de forma segura, sem causar erros se uma propriedade intermediária for null ou undefined.

Suponha que você tenha um objeto que pode ou não ter certas propriedades:

let usuario = {
  perfil: {
    nome: "Alice"
  }
};

Se você tentar acessar uma propriedade que não existe, como usuario.endereco.rua, isso causaria um erro. 
Com o encadeamento opcional, você pode fazer isso de forma segura:

let rua = usuario.endereco?.rua;
console.log(rua); // Saída: undefined

O encadeamento opcional ajuda a evitar erros ao acessar propriedades de objetos complexos, sobretudo quando lidamos com dados de APIs, 
caso em que nem todas as propriedades são garantidas.

3. Operador de atribuição lógica (&&=, ||=, ??=)
Os operadores de atribuição lógica combinam operações lógicas com atribuição. Eles são úteis para atualizar o valor de uma variável com base em uma condição lógica.

&&=: Atribui um novo valor se a variável atual for "truthy".
||=: Atribui um novo valor se a variável atual for "falsy".
??=: Atribui um novo valor se a variável atual for null ou undefined.

Exemplo:

let valor = null;
valor ??= "Valor padrão";
console.log(valor); // Saída: "Valor padrão"

let ativo = true;
ativo &&= false;
console.log(ativo); // Saída: false

let texto = "";
texto ||= "Texto padrão";
console.log(texto); // Saída: "Texto padrão"

4. Para mergulhos mais profundos
documentação oficial do JavaScript: https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators


Utilitários de tipos do TypeScript


1. Omit
O Omit (“omitir”) é um utilitário que cria um novo tipo excluindo algumas propriedades de um tipo existente. 
Imagine que você tem um objeto com várias propriedades, mas quer criar um novo tipo que não inclua algumas delas. O Omit faz exatamente isso.

Exemplo:

type Pessoa = {
  nome: string;
  idade: number;
  email: string;
};

type PessoaSemEmail = Omit<Pessoa, 'email'>;

const pessoa: PessoaSemEmail = {
  nome: 'João',
  idade: 25,
  // email: 'joao@example.com' // Isso causaria um erro, pois 'email' foi omitido
};

O Omit é útil quando você quer criar uma versão simplificada de um tipo, removendo propriedades que não são necessárias em um determinado contexto. 
Isso ajuda a evitar erros e a manter o código mais limpo.

2. Pick
O Pick (“selecionar”) é o oposto do Omit. Ele cria um novo tipo selecionando apenas algumas propriedades de um tipo existente. 
É como escolher apenas as partes que você precisa de um objeto maior.

Exemplo:

type Pessoa = {
  nome: string;
  idade: number;
  email: string;
};

type PessoaComNomeEEmail = Pick<Pessoa, 'nome' | 'email'>;

const pessoa: PessoaComNomeEEmail = {
  nome: 'Maria',
  email: 'maria@example.com'
  // idade: 30 // Isso causaria um erro, pois 'idade' não foi incluído
};

O Pick é útil quando você quer trabalhar apenas com algumas propriedades de um tipo, ignorando o resto. 
Isso pode ser útil para criar interfaces de usuário ou para enviar dados específicos para uma API.

3. Partial
O Partial (“parcial”) transforma todas as propriedades de um tipo em opcionais. 
Isso significa que você pode criar objetos que não precisam ter todas as propriedades definidas.

Exemplo:

type Produto = {
  nome: string;
  preco: number;
  descricao: string;
};

type ProdutoParcial = Partial<Produto>;

const produto: ProdutoParcial = {
  nome: 'Camiseta'
  // preco e descricao são opcionais
};

O Partial é útil quando você está lidando com objetos que podem estar em diferentes estados de completude. 
Por exemplo, ao criar um formulário onde o usuário pode preencher apenas algumas informações de cada vez.

4. Record
O Record cria um tipo de objeto com um conjunto fixo de chaves e um tipo específico para os valores. 
É como um mapa onde todas as chaves têm o mesmo tipo de valor.

Exemplo:

type Status = 'ativo' | 'inativo';

type UsuarioStatus = Record<string, Status>;

const usuarios: UsuarioStatus = {
  'usuario1': 'ativo',
  'usuario2': 'inativo'
  // As chaves são strings e os valores são do tipo Status
};

O Record é útil quando você precisa garantir que todas as chaves de um objeto tenham valores do mesmo tipo. 
Isso é comum em situações onde você está lidando com coleções de dados, como listas de usuários ou produtos.

Documentação oficial do TypeScript: https://www.typescriptlang.org/pt/docs/handbook/utility-types.html

-----------------------

useMemo:

Ao desenvolver aplicações em React, um dos principais pontos a se preocupar é o desempenho.
Se o seu componente fizer cálculos pesados ou precisar de processamento complexo em várias renderizações, ele pode ficar mais lento.
Para evitar que você perca desempenho em suas aplicações, o React possui um hook especial: o hook useMemo.
O useMemo serve para memorizar (ou "lembrar") o resultado de uma “função cara”, isto é, uma função de alto custo em desempenho. 
Isso significa que o React vai guardar o valor de um cálculo e só vai recalculá-lo quando realmente for necessário, ou seja, 
quando alguma dependência do cálculo mudar. Isso ajuda a evitar cálculos desnecessários e melhora a performance da aplicação.

1. Por que usar o useMemo?
Imagine que você tem um componente onde a função precisa somar todos os números de uma lista grande.
Se o componente for re-renderizado várias vezes (por exemplo, porque algum estado mudou), essa soma seria feita várias vezes também, o que pode ser bem lento.
Com o useMemo, você garante que o cálculo só será feito novamente quando a lista de números mudar, evitando recalcular algo que já foi feito antes.
O useMemo funciona de uma maneira parecida com o useEffect.
Porém, enquanto o useEffect serve para executar efeitos colaterais (como fazer uma requisição de rede), o useMemo serve para memorizar o resultado de um cálculo.

O useMemo recebe dois parâmetros:

  A função que você quer memorizar;
  A lista de dependências que vai definir quando a função será reexecutada.

O valor memorizado só será recalculado se alguma das dependências mudar.

    import React, { useMemo } from 'react';
    
    interface CalculationProps {
      numbers: number[];
    }
    
    const SumCalculator = ({ numbers }: CalculationProps) => {
      // Função que faz um cálculo pesado
      const sum = useMemo(() => {
        console.log('Calculando a soma...');
        return numbers.reduce((total, num) => total + num, 0);
      }, [numbers]); // A soma só será recalculada se 'numbers' mudar
    
      return <div>A soma é: {sum}</div>;
    };
    
    export default SumCalculator;

A função reduce soma todos os números de um array. A cada renderização, o useMemo verifica se a lista numbers mudou.

Se a lista não mudar, o React irá reutilizar o valor calculado anteriormente, sem precisar executar o cálculo de novo. Caso contrário, o cálculo será refeito.

O componente renderiza a soma calculada na tela, mas o cálculo só vai ser feito novamente se a lista de números (numbers) mudar.

2. Quando useMemo é mais útil?
  - Cálculos pesados: se você tem funções que fazem cálculos complexos e demorados (como somar números grandes ou ordenar uma lista);
  - Renderizações frequentes: se o seu componente está sendo renderizado frequentemente, mas o cálculo não muda a cada renderização;
  - Dependências estáveis: se as dependências da sua função (como o array de números no exemplo) mudam pouco ou nunca.

3. Quando evitar o useMemo?


- Cálculos simples: se o cálculo é rápido e não impacta muito o desempenho, o useMemo pode ser um exagero e adicionar complexidade desnecessária ao código;
- Dependências que mudam sempre: se as dependências do cálculo mudam em toda renderização, o useMemo não vai ter vantagem. Ele só vale a pena quando as dependências são relativamente estáveis;
- Otimização prematura: não use useMemo apenas por precaução. Primeiro, identifique onde o desempenho realmente está sendo impactado antes de otimizar.

documentação do React para o useMemo: https://react.dev/reference/react/useMemo

Repositório com perguntas sobre React: https://react-typescript-cheatsheet.netlify.app/docs/basic/setup/